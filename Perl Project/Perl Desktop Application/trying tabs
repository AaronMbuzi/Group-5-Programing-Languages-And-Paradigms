#!/usr/bin/perl
 
use 5.010;
use strict;
use warnings;
use Tk;
use Cwd;
use File::Copy;

# Create the main window
my $mw = MainWindow->new;
$mw->geometry("400x300");

# Create a notebook (tabbed interface)
my $notebook = $mw->NoteBook()->pack(-fill => 'both', -expand => 1);

# Create Tab 1
my $tab1 = $notebook->add("Tab 1", -label => "File Creation");

# File Name Label and Entry Widget
$tab1->Label(-text => "File Name:")->grid(-column => 0, -row => 0);
my $filename_entry = $tab1->Entry()->grid(-column => 1, -row => 0);

# File Type Label and Entry Widget
$tab1->Label(-text => "File Type:")->grid(-column => 0, -row => 1);
my $filetype_entry = $tab1->Entry()->grid(-column => 1, -row => 1);

# Directory Label and Entry Widget
$tab1->Label(-text => "Directory:")->grid(-column => 0, -row => 2);
my $directory_entry = $tab1->Entry()->grid(-column => 1, -row => 2);

# Submit Button
$tab1->Button(-text => "Create File", -command => \&create_file)->grid(-column => 0, -row => 3, -columnspan => 2);

# Function to create the file
sub create_file {
    my $filename = $filename_entry->get();
    my $filetype = $filetype_entry->get();
    my $directory = $directory_entry->get();

    my $filepath = $directory . "\\" . $filename . "." . $filetype;

    open(my $filehandle, '>', $filepath) or die "Could not create file: $!";
    print $filehandle "This is a new file!\n";
    close($filehandle);

    $tab1->messageBox(-message => "File created successfully!", -type => "ok");
}

# Create Tab 2
my $tab2 = $notebook->add("Tab 2", -label => "File Modification");

# File Selection Button
$tab2->Button(
    -text    => "Select File",
    -command => \&select_file
)->pack(-padx => 10, -pady => 10);

# Text Widget for File Content
my $text_widget = $tab2->Text()->pack(-fill => 'both', -expand => 1);

# Save File Button
$tab2->Button(
    -text    => "Save File",
    -command => \&save_file
)->pack(-padx => 10, -pady => 10);

# File Selection Dialog
my $selected_file = '';
sub select_file {
    my $fs = $mw->FileSelect();
    $selected_file = $fs->Show();
    
    if ($selected_file) {
        open(my $fh, '<', $selected_file) or die "Could not open file: $!";
        my @lines = <$fh>;
        close($fh);

        $text_widget->delete('1.0', 'end');
        $text_widget->insert('1.0', @lines);
    }
}

# Save File Function
sub save_file {
    return unless $selected_file;
    
    my $content = $text_widget->get('1.0', 'end');
    
    open(my $fh, '>', $selected_file) or die "Could not open file: $!";
    print $fh $content;
    close($fh);
    
    $tab2->messageBox(-message => "File saved successfully!", -type => "ok");
}

#alice paste here
# Create Tab 3(Alice)
my $tab3 = $notebook->add("Tab 3", -label => "File Display");

# Select File Button
$tab3->Button(
    -text    => "Select File",
    -command => \&select_display_file
)->pack(-padx => 10, -pady => 10);

# Text Widget for File Content
my $display_text_widget = $tab3->Text()->pack(-fill => 'both', -expand => 1);

# Select Display File Function
sub select_display_file {
    my $fs = $mw->FileSelect(
        -directory => '/path/to/directory',  # Replace with the desired directory path
    );
    my $selected_file = $fs->Show();
    
    if ($selected_file) {
        open(my $fh, '<', $selected_file) or die "Could not open file: $!";
        my @lines = <$fh>;
        close($fh);

        $display_text_widget->delete('1.0', 'end');
        $display_text_widget->insert('1.0', @lines);
    }
}

# Create Tab 5 Nebert
my $tab5 = $notebook->add("Tab 5", -label => "File Search");

# Create label for directory input
$tab5->Label(-text => "Enter directory:")->pack(-side => 'left');

# Create entry for directory input
my $dir_entry = $tab5->Entry(-width => 50);
$dir_entry->pack(-side => 'left');

# Create label for file input
$tab5->Label(-text => "Enter file name:")->pack(-side => 'left');

# Create entry for file input
my $file_entry = $tab5->Entry(-width => 20);
$file_entry->pack(-side => 'left');

# Create button to search for file
$tab5->Button(-text => 'Search', -command => \&search)->pack(-side => 'left');

# Create output text box
my $output = $tab5->Scrolled('Text', -scrollbars => 'se', -width => 50, -height => 15);
$output->pack();

# Set default directory to the current directory
$dir_entry->insert(0, getcwd());

# Function to search for file
sub search {
    my $directory = $dir_entry->get();
    my $filename = $file_entry->get();

    # Reset the output text box
    $output->delete('1.0', 'end');

    # Check if the directory exists
    if (-d $directory) {
        opendir(my $dh, $directory) or die "Failed to open directory: $!";
        while (my $entry = readdir $dh) {
            next if ($entry eq '.' or $entry eq '..');

            my $filepath = "$directory/$entry";
            if (-f $filepath && $entry eq $filename) {
                $output->insert('end', "Found: $filepath\n");
            }
        }
        closedir $dh;
    } else {
        $output->insert('end', "Invalid directory: $directory\n");
    }
}


# Create Tab 6
#patrick paste here
my $tab6 = $notebook->add("Tab 6", -label => "Tab 6");
my $label6 = $tab5->Label(-text => "Content for Tab 5")->pack(-padx => 10, -pady => 10);

# Create Tab 7
#chansa paste here
my $tab7 = $notebook->add("Tab 7", -label => "File Organization");

# Directory Label and Entry Widget
$tab7->Label(-text => "Directory:")->pack(-side => 'left');
my $org_directory_entry = $tab7->Entry(-width => 50);
$org_directory_entry->pack(-side => 'left');

# Order Label and OptionMenu Widget
$tab7->Label(-text => "Order:")->pack(-side => 'left');
my $order_var = 'Ascending';
my $order_optionmenu = $tab7->Optionmenu(
    -options  => ['Ascending', 'Descending'],
    -variable => \$order_var,
)->pack(-side => 'left');

# Organize Button
$tab7->Button(-text => "Organize Files", -command => \&organize_files)->pack(-side => 'left');

# Function to organize files
sub organize_files {
    my $directory = $org_directory_entry->get();

    # Check if the directory exists
    if (-d $directory) {
        opendir(my $dh, $directory) or die "Failed to open directory: $!";
        my @files = readdir($dh);
        closedir $dh;

        # Remove '.' and '..' entries
        @files = grep { !/^\.{1,2}$/ } @files;

        # Sort the files
        if ($order_var eq 'Ascending') {
            @files = sort @files;
        } elsif ($order_var eq 'Descending') {
            @files = sort { lc($b) cmp lc($a) } @files;
        }

        # Move the files to the organized directory
        my $organized_dir = "$directory/Organized";
        mkdir $organized_dir unless -d $organized_dir;

        foreach my $file (@files) {
            my $src = "$directory/$file";
            my $dest = "$organized_dir/$file";
            move($src, $dest) or die "Failed to move file: $!";
        }

        $tab7->messageBox(-message => "Files organized successfully!", -type => "ok");
    } else {
        $tab7->messageBox(-message => "Invalid directory: $directory", -type => "ok");
    }
}

# Start the Tk event loop
MainLoop;
